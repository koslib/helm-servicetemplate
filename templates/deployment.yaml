apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "service_template.fullname" . }}
  labels:
    {{- include "service_template.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
  selector:
    matchLabels:
      {{- include "service_template.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "service_template.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "service_template.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      
      {{- if .Values.secretsVolumeEnabled }}
      volumes:
        - name: secrets
          secret: 
            secretName: {{ include "service_template.fullname" . }}-volume
            items:
            {{- range $key, $val := .Values.secrets_volume }}
              - key: {{ $key }}
                path: {{ $key }}
            {{- end }}
      {{- end }}

      containers:
        - name: {{ .Values.serviceName }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerCommand.enabled }}
          command: {{ .Values.containerCommand.command }}
          args: {{ .Values.containerCommand.args }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.healthchecks.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthchecks.path }}
              port: {{ .Values.healthchecks.port }}
            initialDelaySeconds: {{ .Values.healthchecks.initialDelaySeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthchecks.path }}
              port: {{ .Values.healthchecks.port }}
            initialDelaySeconds: {{ .Values.healthchecks.initialDelaySeconds }}
          {{- end }}  
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- $secretKeyRef := include "service_template.fullname" . }}
          env:
          {{- range $key, $val := .Values.env }}
            - name: {{ $key }}
              value: {{ $val | quote }}
          {{- end }}
          {{- range $key, $val := .Values.secrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretKeyRef }}
                  key: {{ $key }}
          {{- end -}}
          
          {{- if .Values.secretsVolumeEnabled }}
          volumeMounts:
          {{- range $key, $val := .Values.secrets_volume }}
          - name: secrets
            mountPath: "/var/run/secrets/"
          {{- end -}}
          {{- end -}}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
